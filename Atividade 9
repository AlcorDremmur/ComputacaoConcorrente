#include <stdio.h>
#include <stdlib.h> 
#include <pthread.h>
#include <semaphore.h>

#define NTHREADS  5

/* Variaveis globais */
int x = 0;
sem_t condt1, condt5;     			//semaforos para sincronizar a ordem de execucao das threads

//Thread 5 - Deve ser a primeira a ser iniciada
void *thread_5 (void *threadid) {
	int *tid = (int*) threadid;
  
	printf("Seja bem-vindo!\n");
	sem_post(&condt5); 				//permite que T2, T3 e T4 executem

	pthread_exit(NULL);
}

//Thread 4 - Ordem nao importa
void *thread_4 (void *threadid) {
	int *tid = (int*) threadid;
  
	//printf("Thread %d - Comecou\n", *tid);

	sem_wait(&condt5); 				//espera T5 executar
	printf("Aceita um copo dagua?\n");
	sem_post(&condt5); 				//permite T2 e T3 executarem

	x++;
	if (x==3) sem_post(&condt1);	//permite T1 executar
	
	pthread_exit(NULL);
}

//Thread 3 - Ordem nao importa
void *thread_3 (void *threadid) {
	int *tid = (int*) threadid;
  
	//printf("Thread %d - Comecou\n", *tid);
	
	sem_wait(&condt5); 				//espera T5 executar
	printf("Sente-se por favor.\n");
	sem_post(&condt5); 				//permite T2 e T4 executarem
	
	x++;
	if (x==3) sem_post(&condt1);	//permite T1 executar
	
	pthread_exit(NULL);
}

//Thread 2 - Ordem nao importa
void *thread_2 (void *threadid) {
	int *tid = (int*) threadid;

	//printf("Thread %d - Comecou\n", *tid);
	
	sem_wait(&condt5); 				//espera T5 executar
	printf("Fique a vontade.\n");
	sem_post(&condt5); 				//permite T3 e T4 executarem
	
	x++;
	if (x==3) sem_post(&condt1);	//permite T1 executar
	
	pthread_exit(NULL);
}

//Thread 1 - Deve ser a ultima a ser executada
void *thread_1 (void *threadid) {
	int *tid = (int*) threadid;

	sem_wait(&condt1); //espera T2, T3, T4 executar
	printf("Volte sempre!\n");
	
	pthread_exit(NULL);
}

int main(int argc, char *argv[]) {
	int i, id[NTHREADS];
	pthread_t threads[NTHREADS];

	//Id das threads
	for (int i=0; i<NTHREADS; i++) {
		id[i] = i+1;
    }
	
	// Inicia os semaforos
	sem_init(&condt1, 0, 0);
	sem_init(&condt5, 0, 0);
  
	/* Cria as threads */
	pthread_create(&threads[0], NULL, thread_1, (void *)id[0]);
	pthread_create(&threads[1], NULL, thread_2, (void *)id[1]);
	pthread_create(&threads[2], NULL, thread_3, (void *)id[2]);
	pthread_create(&threads[3], NULL, thread_4, (void *)id[3]);
	pthread_create(&threads[4], NULL, thread_5, (void *)id[4]);
	
	/* Espera todas as threads completarem */
	for (int i = 0; i<NTHREADS; i++){
		pthread_join(threads[i], NULL);
	}
	//printf ("Fim\n");
	
}
