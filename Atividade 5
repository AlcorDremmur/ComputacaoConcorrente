#include <stdio.h>
#include <stdlib.h> 
#include <pthread.h>

#define NTHREADS  5

/* Variaveis globais */
int x = 0;
pthread_mutex_t mutex;
pthread_cond_t cond_5, cond_1;

//Thread 5 - Deve ser a primeira a ser iniciada
void *thread_5 (void *threadid) {
	int *tid = (int*) threadid;
  
	printf("Thread %d - Comecou\n", *tid);

	printf("Seja bem-vindo!\n");

	pthread_mutex_lock(&mutex);
	x++;
	if (x==1) {
		printf("T5: x=%d, vai sinalizar a cond_5\n", x);
		pthread_cond_broadcast(&cond_5);		//libera as threads 2, 3 e 4
	}
	pthread_mutex_unlock(&mutex);

	pthread_exit(NULL);
}

//Thread 4 - Ordem nao importa
void *thread_4 (void *threadid) {
	int *tid = (int*) threadid;
  
	printf("Thread %d - Comecou\n", *tid);
	
	pthread_mutex_lock(&mutex);
	if (x<1) { 
	    printf("T4: x=%d - Bloqueado\n", x);
	    pthread_cond_wait(&cond_5, &mutex);
	    printf("T4: sinal recebido - mutex realocado - x=%d\n", x);
	}
	
	printf("Aceita um copo dagua?\n");
	
	x++;
	if (x==4) {
		printf("T4: x=%d, vai sinalizar a cond_1\n", x);	//caso as threads 2, 3 e 4 executem
		pthread_cond_signal(&cond_1);						//libera a thread 1
	}
	
	pthread_mutex_unlock(&mutex); 
	pthread_exit(NULL);
}

//Thread 3 - Ordem nao importa
void *thread_3 (void *threadid) {
	int *tid = (int*) threadid;
  
	printf("Thread %d - Comecou\n", *tid);
	//printf("Thread 3 - Comecou\n");
	
	pthread_mutex_lock(&mutex);
	if (x<1) { 
	    printf("T3: x=%d - Bloqueado\n", x);
	    pthread_cond_wait(&cond_5, &mutex);
	    printf("T3: sinal recebido - mutex realocado - x=%d\n", x);
	}
	
	printf("Sente-se por favor.\n");
	
	x++;
	if (x==4) {
		printf("T3: x=%d, vai sinalizar a cond_1\n", x);	//caso as threads 2, 3 e 4 executem
		pthread_cond_signal(&cond_1);						//libera a thread 1
	}
	
	pthread_mutex_unlock(&mutex); 
	pthread_exit(NULL);
}

//Thread 2 - Ordem nao importa
void *thread_2 (void *threadid) {
	int *tid = (int*) threadid;

	printf("Thread %d - Comecou\n", *tid);
	//printf("Thread 2 - Comecou\n");
	
	pthread_mutex_lock(&mutex);
	if (x<1) { 
	    printf("T2: x=%d - Bloqueado\n", x);
	    pthread_cond_wait(&cond_5, &mutex);
	    printf("T2: sinal recebido - mutex realocado - x=%d\n", x);
	}
	
	printf("Fique a vontade.\n");
	
	x++;
	if (x==4) {
		printf("T2: x=%d, vai sinalizar a cond_1\n", x);	//caso as threads 2, 3 e 4 executem
		pthread_cond_signal(&cond_1);						//libera a thread 1
	}
	
	pthread_mutex_unlock(&mutex); 
	pthread_exit(NULL);
}

//Thread 1 - Deve ser a ultima a ser executada
void *thread_1 (void *threadid) {
	int *tid = (int*) threadid;

	printf("Thread %d - Comecou\n", *tid);
	//printf("Thread 1 - Comecou\n");
	
	pthread_mutex_lock(&mutex);
	if (x<4) { 
	    printf("T1: x=%d - Bloqueado\n", x);
	    pthread_cond_wait(&cond_1, &mutex);
	    printf("T1: sinal recebido - mutex realocado - x=%d\n", x);
	}
	
	printf("Volte sempre!\n");
	
	pthread_mutex_unlock(&mutex); 
	pthread_exit(NULL);
}

int main(int argc, char *argv[]) {
	int i; 
	int *t1, *t2, *t3, *t4, *t5;
	pthread_t threads[NTHREADS];
	
	t1 = (int*) malloc(sizeof(int)); 
	t2 = (int*) malloc(sizeof(int)); 
	t3 = (int*) malloc(sizeof(int));
	t4 = (int*) malloc(sizeof(int)); 
	t5 = (int*) malloc(sizeof(int)); 
	*t1=1, *t2=2, *t3=3, *t4=4, *t5=5;
	
	/* Inicilaiza o mutex (lock de exclusao mutua) e a variavel de condicao */
	pthread_mutex_init(&mutex, NULL);
	pthread_cond_init (&cond_1, NULL);
	pthread_cond_init (&cond_5, NULL);
  
	/* Cria as threads */
	pthread_create(&threads[0], NULL, thread_1, (void *)t1);
	pthread_create(&threads[1], NULL, thread_2, (void *)t2);
	pthread_create(&threads[2], NULL, thread_3, (void *)t3);
	pthread_create(&threads[3], NULL, thread_4, (void *)t4);
	pthread_create(&threads[4], NULL, thread_5, (void *)t5);
	
	/* Espera todas as threads completarem */
	for (int i = 0; i<NTHREADS; i++){
		pthread_join(threads[i], NULL);
	}
	printf ("Fim\n");
	
	/* Desaloca variaveis e termina */
	pthread_mutex_destroy(&mutex);
	pthread_cond_destroy(&cond_1);
	pthread_cond_destroy(&cond_5);
		
}
