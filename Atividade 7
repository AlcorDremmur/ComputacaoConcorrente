
class S {
    //Recursos compartilhados
    private int r;        
    private int vetor[];
    
    //Construtor
    public S() { 
        this.r = 0; 
    }

    public void iniciar_vetor(int n) { 
        vetor = new int[n];
        
        for (int i=0; i<n; i++) {
            vetor[i] = i+1;
        }
    }
    
    public int get_vetor(int i){
       int x = vetor[i];
       return x;
    }
    
    //Incrementa 'r' em um
    public synchronized void inc() {
        this.r++; 
    }

     //Retorna 'r'
    public synchronized int get() { 
        return this.r; 
    }

}

//classe que estende Thread e implementa a tarefa de cada thread do programa 
class T extends Thread {
    private int id;                         //identificador da thread
    S s;                                    //objeto compartilhado com outras threads

    private int bloco = X2.N/X2.NTHREADS;   
    private int ini;                        //inicio do bloco
    private int fim;                        //fim do bloco
    
    //Construtor
    public T(int tid, S s) { 
        this.id = tid; 
        this.s = s;
        
        ini = id*bloco;                     
        if(id==X2.NTHREADS-1) fim=X2.N;     //trata sobra
        else fim = ini+bloco;
    }

    //Metodo main desta thread
    public void run() {
      
        System.out.println("Thread " + this.id + " iniciou!");
        for (int i=ini; i<fim; i++) {
            //System.out.println("vetor[" + i + "] = " + s.get_vetor(i));
            if(s.get_vetor(i)%2 == 0){
                this.s.inc();
            }  
        }
        System.out.println("Thread " + this.id + " terminou!"); 
    }
}

public class X2 {
    public static final int N = 10;                 //tamanho do vetor
    public static final int NTHREADS = 2;           //numero de threads
    
    public static void main(String args[]) {
        Thread[] threads = new Thread[NTHREADS];    //reserva espaco para um vetor de threads
        S s = new S();                              //cria uma instancia do recurso compartilhado entre as threads
        
        s.iniciar_vetor(N);
        
        //Cria as threads da aplicacao
        for (int i=0; i<threads.length; i++) {
            threads[i] = new T(i, s);
        }
        
        //Inicia as threads
        for (int i=0; i<threads.length; i++) {
            threads[i].start();
        }
        
        //Espera pelo termino de todas as threads
        for (int i=0; i<threads.length; i++) {
            try { threads[i].join(); } catch (InterruptedException e) { return; }
        }
        
        System.out.println("Quantidade de numeros pares = " + s.get());
    }
}
