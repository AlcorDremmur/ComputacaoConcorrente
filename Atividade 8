import static java.lang.Thread.sleep;

//Monitor leitores/escritores
class LE {
    private int leit, escr;  
    private int x;  
  
    //Construtor
    LE() { 
        this.leit = 0;          //leitores lendo (0 ou mais)
        this.escr = 0;          //escritor escrevendo (0 ou 1)
        this.x = 0;             //variavel compartilhada
    } 

    //Entrada para escritores
    public synchronized void EntraEscritor (int id) {
        try { 
            while ((this.leit > 0) || (this.escr > 0)) {
                System.out.println ("EscritorBloqueado(" + id + ")" + " - Leitores = " + this.leit + ", Escritores = " + this.escr);
                wait();         //bloqueia pela condicao logica da aplicacao 
            }
            this.escr++;        //registra que ha um escritor escrevendo
            System.out.println ("EscritorEscrevendo(" + id + ")");
        }   catch (InterruptedException e) { }
    }
  
    //Saida para escritores
    public synchronized void SaiEscritor (int id) {
        this.escr--;            //registra que o escritor saiu
        notifyAll();            //libera leitores e escritores (caso existam leitores ou escritores bloqueados)
        System.out.println ("EscritorSaindo("  + id + ")");
    }
   
    
    //Entrada para leitores
    public synchronized void EntraLeitor (int id) {
        try { 
            while (this.escr > 0) {
                System.out.println ("LeitorBloqueado(" + id + ")" + "    - Leitores = " + this.leit);
                wait();         //bloqueia pela condicao logica da aplicacao 
            }
            this.leit++;        //registra que ha mais um leitor lendo
            System.out.println ("LeitorLendo("  + id + ")");
        }   catch (InterruptedException e) { }
    }
  
    //Saida para leitores
    public synchronized void SaiLeitor (int id) {
        this.leit--; //registra que um leitor saiu
        if (this.leit == 0) 
            this.notify(); //libera escritor (caso exista escritor bloqueado)
        System.out.println ("LeitorSaindo(" + id + ")");
    }
    
    
    //Incrementa 'x' em 1
    public synchronized void inc() {
        this.x++; 
    }
    
    //Modifica 'x'
    public synchronized int set(int y) { 
        return this.x = y; 
    }

    //Retorna 'x'
    public synchronized int get() { 
        return this.x; 
    }
  
}

//Aplicacao --------------------------------------------------------

//Thread 1
class T1 extends Thread {
    int id;             //identificador da thread
    int delay;          //atraso
    LE monitor;         //objeto monitor para coordenar a lÃ³gica de execuÃ§Ã£o das threads

    //Construtor
    T1 (int id, int delayTime, LE m) {
        this.id = id;
        this.delay = delayTime;
        this.monitor = m;
    }

    //Metodo executado pela thread
    public void run () {
        double j=777777777.7, i;
        try {
            for (;;) {
              this.monitor.EntraEscritor(this.id); 
              
              for (i=0; i<100000000; i++) {j=j/2;}      //loop
              this.monitor.inc();
              System.out.println ("T1-" + this.id + ") incrementa X");
              
              this.monitor.SaiEscritor(this.id); 
              sleep(this.delay);                        //atraso
            }
        } catch (InterruptedException e) { return; }
    }
}

//Thread 2
class T2 extends Thread {
    int id;             //identificador da thread
    int delay;          //atraso bobo
    LE monitor;         //objeto monitor para coordenar a lÃ³gica de execuÃ§Ã£o das threads

    //Construtor
    T2 (int id, int delayTime, LE m) {
        this.id = id;
        this.delay = delayTime;
        this.monitor = m;
    }

    //Metodo executado pela thread
    public void run () {
        double j=777777777.7, i;
        try {
            for (;;) {
                this.monitor.EntraLeitor(this.id);
                
                for (i=0; i<100000000; i++) {j=j/2;}        //loop
                System.out.println ("T2-" + this.id + ") X = " + this.monitor.get());
                
                this.monitor.SaiLeitor(this.id);
                sleep(this.delay); 
            }
        } catch (InterruptedException e) { return; }
    }
}

//Thread 3
class T3 extends Thread {
    int id;             //identificador da thread
    int delay;          //atraso
    LE monitor;         //objeto monitor para coordenar a lÃ³gica de execuÃ§Ã£o das threads

    //Construtor
    T3 (int id, int delayTime, LE m) {
        this.id = id;
        this.delay = delayTime;
        this.monitor = m;
    }

    //Metodo executado pela thread
    public void run () {
        double j=777777777.7, i;
        try {
            for (;;) {
                
                this.monitor.EntraLeitor(this.id);
                
                for (i=0; i<100000000; i++) {j=j/2;}        //loop
                System.out.println ("T3-" + this.id + ") X = " + this.monitor.get());
                
                this.monitor.SaiLeitor(this.id);
                sleep(this.delay);
              
                //--------------------------------------------------------
                
                this.monitor.EntraEscritor(this.id); 
              
                for (i=0; i<100000000; i++) {j=j/2;}        //loop
                this.monitor.set(id);
                System.out.println ("T3-" + this.id + ") Modifica X");
              
                this.monitor.SaiEscritor(this.id); 
                sleep(this.delay);                          //atraso
            }
        } catch (InterruptedException e) { return; }
    }
}

public class Atividade8 {
    static final int X = 3;
    static final int Y = 3;
    static final int Z = 3;

    public static void main(String args[]) {
        int i;
        LE monitor = new LE();          // Monitor (objeto compartilhado entre leitores e escritores)
        T1[] t1 = new T1[X];            // Threads 1
        T2[] t2 = new T2[Y];            // Threads 2
        T3[] t3 = new T3[Z];            // Threads 3

        for (i=0; i<X; i++) {
            t1[i] = new T1(i+1, (i+1)*500, monitor);
            t1[i].start(); 
        }
        for (i=0; i<Y; i++) {
            t2[i] = new T2(i+1, (i+1)*500, monitor);
            t2[i].start(); 
        }
        for (i=0; i<Z; i++) {
            t3[i] = new T3(i+1, (i+1)*500, monitor);
            t3[i].start(); 
        }
        
    }
}
